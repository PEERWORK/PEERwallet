/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type VaultConfigStruct = { isImpersonationMode: boolean };

export type VaultConfigStructOutput = [boolean] & {
  isImpersonationMode: boolean;
};

export type SismoConnectConfigStruct = {
  appId: BytesLike;
  vault: VaultConfigStruct;
};

export type SismoConnectConfigStructOutput = [
  string,
  VaultConfigStructOutput
] & { appId: string; vault: VaultConfigStructOutput };

export interface MintGovernanceTokenInterface extends utils.Interface {
  functions: {
    "ADDRESSES_PROVIDER_V2()": FunctionFragment;
    "APP_ID()": FunctionFragment;
    "IS_IMPERSONATION_MODE()": FunctionFragment;
    "SISMO_CONNECT_LIB_VERSION()": FunctionFragment;
    "claimWithSismo(bytes)": FunctionFragment;
    "claimed(uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "peerToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESSES_PROVIDER_V2"
      | "APP_ID"
      | "IS_IMPERSONATION_MODE"
      | "SISMO_CONNECT_LIB_VERSION"
      | "claimWithSismo"
      | "claimed"
      | "config"
      | "peerToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER_V2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "APP_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IS_IMPERSONATION_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SISMO_CONNECT_LIB_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithSismo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "peerToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER_V2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "APP_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IS_IMPERSONATION_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SISMO_CONNECT_LIB_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithSismo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "peerToken", data: BytesLike): Result;

  events: {};
}

export interface MintGovernanceToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MintGovernanceTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESSES_PROVIDER_V2(overrides?: CallOverrides): Promise<[string]>;

    APP_ID(overrides?: CallOverrides): Promise<[string]>;

    IS_IMPERSONATION_MODE(overrides?: CallOverrides): Promise<[boolean]>;

    SISMO_CONNECT_LIB_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimWithSismo(
      response: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    config(
      overrides?: CallOverrides
    ): Promise<[SismoConnectConfigStructOutput]>;

    peerToken(overrides?: CallOverrides): Promise<[string]>;
  };

  ADDRESSES_PROVIDER_V2(overrides?: CallOverrides): Promise<string>;

  APP_ID(overrides?: CallOverrides): Promise<string>;

  IS_IMPERSONATION_MODE(overrides?: CallOverrides): Promise<boolean>;

  SISMO_CONNECT_LIB_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  claimWithSismo(
    response: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  config(overrides?: CallOverrides): Promise<SismoConnectConfigStructOutput>;

  peerToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADDRESSES_PROVIDER_V2(overrides?: CallOverrides): Promise<string>;

    APP_ID(overrides?: CallOverrides): Promise<string>;

    IS_IMPERSONATION_MODE(overrides?: CallOverrides): Promise<boolean>;

    SISMO_CONNECT_LIB_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    claimWithSismo(
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    config(overrides?: CallOverrides): Promise<SismoConnectConfigStructOutput>;

    peerToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADDRESSES_PROVIDER_V2(overrides?: CallOverrides): Promise<BigNumber>;

    APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    IS_IMPERSONATION_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    SISMO_CONNECT_LIB_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    claimWithSismo(
      response: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    peerToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESSES_PROVIDER_V2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IS_IMPERSONATION_MODE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SISMO_CONNECT_LIB_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimWithSismo(
      response: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    peerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
